# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:13:57+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    IticrCertificatePostRequest,
    IticrCertificatePostResponse,
    IticrCertificatePostResponse1,
    IticrCertificatePostResponse2,
    IticrCertificatePostResponse3,
    IticrCertificatePostResponse4,
    IticrCertificatePostResponse5,
    IticrCertificatePostResponse6,
)

app = MCPProxy(
    description="National Council for Vocational Training (NCVT) under Ministry of Skill Development And Entrepreneurship has been entrusted with the responsibilities of prescribing standards and curricula for craftsmen training and conducting All India Trade Tests and awarding National Trade Certificates. All the ITI certificates under the purview of NCVT are available to download through Citizen's DigiLocker account.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Ministry of Skill Development And Entrepreneurship',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/msde/v3'}],
)


@app.post(
    '/iticr/certificate',
    description=""" API to verify ITI Certificate. """,
    tags=['certificate_operations'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def iticr(body: IticrCertificatePostRequest = None):
    """
    ITI Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
